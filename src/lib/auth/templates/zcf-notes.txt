ZCF:

create one transaction:
inputs: must all be P2PKH, using different keys
outputs: can be anything + the ZCF output

Buyer – P2PKH (using forfeitable keys)
Merchant
Miner


recover_bond: <recover.signature> <recover.public_key> <redeem_script>
issue_bond (redeem script):

OP_HASH160 <$(<
                                              <recover.signature> <recover.public_key>      
OP_DUP                                        <recover.signature> <recover.public_key> <recover.public_key>
OP_HASH160                                    <recover.signature> <recover.public_key> <(recover.public_key hash)>
<$(<recover.public_key> OP_HASH160)>          <recover.signature> <recover.public_key> <(recover.public_key hash)> <(recover.public_key hash)>
OP_EQUAL                                      <recover.signature> <recover.public_key> 1
OP_IF                                         <recover.signature> <recover.public_key>
    OP_CHECKSIG                               1
OP_ELSE                                   -- skip     
    OP_DUP OP_HASH160                                      
    <$(<buyer.public_key> OP_HASH160)>                                     
    OP_EQUAL                                     
    OP_IF                                     
        OP_OVER <4> OP_PICK                                     
        OP_EQUAL OP_NOT OP_VERIFY                                     
        OP_DUP OP_TOALTSTACK                                     
        OP_CHECKDATASIGVERIFY                                     
        OP_FROMALTSTACK                                     
        OP_CHECKDATASIG                                     
    OP_ELSE                                     
        OP_RETURN                                     
    OP_ENDIF                                     
OP_ENDIF                                  -- end skip    

> OP_HASH160)> OP_EQUAL                                          




claim_bond: <signature1> <message1> <signature2> <message2> <buyer.public_key> <redeem_script>
issue_bond (redeem script):

OP_HASH160 <$(<
                                              <original_signature> <original_signing_serialization> <fraudulent_signature> <fraudulent_signing_serialization> <buyer.public_key>  
OP_DUP                                        <original_signature> <original_signing_serialization> <fraudulent_signature> <fraudulent_signing_serialization> <buyer.public_key> <buyer.public_key>
OP_HASH160                                    <original_signature> <original_signing_serialization> <fraudulent_signature> <fraudulent_signing_serialization> <buyer.public_key> <(buyer.public_key hash)>
<$(<recover.public_key> OP_HASH160)>          <original_signature> <original_signing_serialization> <fraudulent_signature> <fraudulent_signing_serialization> <buyer.public_key> <(buyer.public_key hash)> <(recover.public_key hash)>
OP_EQUAL                                      <original_signature> <original_signing_serialization> <fraudulent_signature> <fraudulent_signing_serialization> <buyer.public_key> 0
OP_IF                                         -- skip
    OP_CHECKSIG                               
OP_ELSE                                       <original_signature> <original_signing_serialization> <fraudulent_signature> <fraudulent_signing_serialization> <buyer.public_key>
    OP_DUP OP_HASH160                         <original_signature> <original_signing_serialization> <fraudulent_signature> <fraudulent_signing_serialization> <buyer.public_key> <(buyer.public_key hash)>
    <$(<buyer.public_key> OP_HASH160)>        <original_signature> <original_signing_serialization> <fraudulent_signature> <fraudulent_signing_serialization> <buyer.public_key> <(buyer.public_key hash)> <(buyer.public_key hash)>                             
    OP_EQUAL                                  <original_signature> <original_signing_serialization> <fraudulent_signature> <fraudulent_signing_serialization> <buyer.public_key> 1   
    OP_IF                                     <original_signature> <original_signing_serialization> <fraudulent_signature> <fraudulent_signing_serialization> <buyer.public_key>
        OP_OVER                               <original_signature> <original_signing_serialization> <fraudulent_signature> <fraudulent_signing_serialization> <buyer.public_key> <fraudulent_signing_serialization>
        <4> OP_PICK                           <original_signature> <original_signing_serialization> <fraudulent_signature> <fraudulent_signing_serialization> <buyer.public_key> <fraudulent_signing_serialization> <original_signing_serialization>
        OP_EQUAL                              <original_signature> <original_signing_serialization> <fraudulent_signature> <fraudulent_signing_serialization> <buyer.public_key> 0
        OP_NOT                                <original_signature> <original_signing_serialization> <fraudulent_signature> <fraudulent_signing_serialization> <buyer.public_key> 1
        OP_VERIFY                             <original_signature> <original_signing_serialization> <fraudulent_signature> <fraudulent_signing_serialization> <buyer.public_key>                                     
        OP_DUP OP_TOALTSTACK                  <original_signature> <original_signing_serialization> <fraudulent_signature> <fraudulent_signing_serialization> <buyer.public_key>    ALT: <buyer.public_key>               
        OP_CHECKDATASIGVERIFY                 <original_signature> <original_signing_serialization>   ALT: <buyer.public_key>                                     
        OP_FROMALTSTACK                       <original_signature> <original_signing_serialization> <buyer.public_key>
        OP_CHECKDATASIG                       1              
    OP_ELSE                                   -- skip  
        OP_RETURN                                     
    OP_ENDIF                                  -- end skip   
OP_ENDIF                                      -- end skip

> OP_HASH160)> OP_EQUAL                            

// tslint:disable:no-expression-statement no-magic-numbers readonly-array
/*
import { instantiateRipemd160 } from '../../../crypto/crypto';
import { instantiateSha256 } from '../../../crypto/sha256';
import { hexToBin } from '../../../utils/utils';
import { testOperator } from '../instruction-sets.spec.helper';
import { fullBase, fullClone } from './common.spec.helper';
import { opHash160 } from './crypto';

(async () => {
  // tslint:disable-next-line:no-unused-expression
  testOperator(
    opHash160(await instantiateSha256(), await instantiateRipemd160()),
    'OP_HASH160: works',
    'OP_HASH160',
    'Pop the top element off the stack and pass it through sha256, then ripemd160, pushing the result onto the stack.',
    [
      { ...fullBase(), stack: [new Uint8Array([1, 2, 3])] },
      {
        stack: [hexToBin('9bc4860bb936abf262d7a51f74b4304833fee3b2')]
      }
    ],
    fullClone
  );
})().catch(error => {
  // tslint:disable-next-line:no-console
  console.error(error);
});

// TODO: finish testing OP_CODESEPARATOR
// testOperator(
//   codeSeparator(),
//   'OP_CODESEPARATOR: works',
//   'OP_CODESEPARATOR',
//   'Duplicate the top element on the stack.',
//   [{ ip: 1, lastCodeSeparator: -1 }, { lastCodeSeparator: 0 }],
//   clone
// );
*/
